function [methodinfo,structs,enuminfo,ThunkLibName]=mHeader
%MHEADER Create structures to define interfaces found in 'Sbigudrv'.

%This function was generated by loadlibrary.m parser version 1.1.6.35 on Thu Jul 26 19:36:35 2012
%perl options:'Sbigudrv.i -outfile=mHeader.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern short _stdcall SBIGUnivDrvCommand ( short command , void * Params , void * Results ); 
fcns.name{fcnNum}='SBIGUnivDrvCommand'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int16'; fcns.RHS{fcnNum}={'int16', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
structs.StartExposureParams.packing=8;
structs.StartExposureParams.members=struct('ccd', 'uint16', 'exposureTime', 'ulong', 'abgState', 'uint16', 'openShutter', 'uint16');
structs.StartExposureParams2.packing=8;
structs.StartExposureParams2.members=struct('ccd', 'uint16', 'exposureTime', 'ulong', 'abgState', 'uint16', 'openShutter', 'uint16', 'readoutMode', 'uint16', 'top', 'uint16', 'left', 'uint16', 'height', 'uint16', 'width', 'uint16');
structs.EndExposureParams.packing=8;
structs.EndExposureParams.members=struct('ccd', 'uint16');
structs.ReadoutLineParams.packing=8;
structs.ReadoutLineParams.members=struct('ccd', 'uint16', 'readoutMode', 'uint16', 'pixelStart', 'uint16', 'pixelLength', 'uint16');
structs.DumpLinesParams.packing=8;
structs.DumpLinesParams.members=struct('ccd', 'uint16', 'readoutMode', 'uint16', 'lineLength', 'uint16');
structs.EndReadoutParams.packing=8;
structs.EndReadoutParams.members=struct('ccd', 'uint16');
structs.StartReadoutParams.packing=8;
structs.StartReadoutParams.members=struct('ccd', 'uint16', 'readoutMode', 'uint16', 'top', 'uint16', 'left', 'uint16', 'height', 'uint16', 'width', 'uint16');
structs.SetTemperatureRegulationParams.packing=8;
structs.SetTemperatureRegulationParams.members=struct('regulation', 'uint16', 'ccdSetpoint', 'uint16');
structs.SetTemperatureRegulationParams2.packing=8;
structs.SetTemperatureRegulationParams2.members=struct('regulation', 'uint16', 'ccdSetpoint', 'double');
structs.QueryTemperatureStatusParams.packing=8;
structs.QueryTemperatureStatusParams.members=struct('request', 'uint16');
structs.QueryTemperatureStatusResults.packing=8;
structs.QueryTemperatureStatusResults.members=struct('enabled', 'uint16', 'ccdSetpoint', 'uint16', 'power', 'uint16', 'ccdThermistor', 'uint16', 'ambientThermistor', 'uint16');
structs.QueryTemperatureStatusResults2.packing=8;
structs.QueryTemperatureStatusResults2.members=struct('coolingEnabled', 'uint16', 'fanEnabled', 'uint16', 'ccdSetpoint', 'double', 'imagingCCDTemperature', 'double', 'trackingCCDTemperature', 'double', 'externalTrackingCCDTemperature', 'double', 'ambientTemperature', 'double', 'imagingCCDPower', 'double', 'trackingCCDPower', 'double', 'externalTrackingCCDPower', 'double', 'heatsinkTemperature', 'double', 'fanPower', 'double', 'fanSpeed', 'double', 'trackingCCDSetpoint', 'double');
structs.ActivateRelayParams.packing=8;
structs.ActivateRelayParams.members=struct('tXPlus', 'uint16', 'tXMinus', 'uint16', 'tYPlus', 'uint16', 'tYMinus', 'uint16');
structs.PulseOutParams.packing=8;
structs.PulseOutParams.members=struct('numberPulses', 'uint16', 'pulseWidth', 'uint16', 'pulsePeriod', 'uint16');
structs.TXSerialBytesParams.packing=8;
structs.TXSerialBytesParams.members=struct('dataLength', 'uint16', 'data', 'uint8#256');
structs.TXSerialBytesResults.packing=8;
structs.TXSerialBytesResults.members=struct('bytesSent', 'uint16');
structs.GetSerialStatusResults.packing=8;
structs.GetSerialStatusResults.members=struct('clearToCOM', 'uint16');
structs.EstablishLinkParams.packing=8;
structs.EstablishLinkParams.members=struct('sbigUseOnly', 'uint16');
structs.EstablishLinkResults.packing=8;
structs.EstablishLinkResults.members=struct('cameraType', 'uint16');
structs.GetDriverInfoParams.packing=8;
structs.GetDriverInfoParams.members=struct('request', 'uint16');
structs.GetDriverInfoResults0.packing=8;
structs.GetDriverInfoResults0.members=struct('version', 'uint16', 'name', 'int8#64', 'maxRequest', 'uint16');
structs.GetCCDInfoParams.packing=8;
structs.GetCCDInfoParams.members=struct('request', 'uint16');
structs.READOUT_INFO.packing=8;
structs.READOUT_INFO.members=struct('mode', 'uint16', 'width', 'uint16', 'height', 'uint16', 'gain', 'uint16', 'pixel_width', 'ulong', 'pixel_height', 'ulong');
structs.GetCCDInfoResults2.packing=8;
structs.GetCCDInfoResults2.members=struct('badColumns', 'uint16', 'columns', 'uint16#4', 'imagingABG', 'uint16', 'serialNumber', 'int8#10');
structs.GetCCDInfoResults3.packing=8;
structs.GetCCDInfoResults3.members=struct('adSize', 'uint16', 'filterType', 'uint16');
structs.GetCCDInfoResults4.packing=8;
structs.GetCCDInfoResults4.members=struct('capabilitiesBits', 'uint16', 'dumpExtra', 'uint16');
structs.QueryCommandStatusParams.packing=8;
structs.QueryCommandStatusParams.members=struct('command', 'uint16');
structs.QueryCommandStatusResults.packing=8;
structs.QueryCommandStatusResults.members=struct('status', 'uint16');
structs.MiscellaneousControlParams.packing=8;
structs.MiscellaneousControlParams.members=struct('fanEnable', 'uint16', 'shutterCommand', 'uint16', 'ledState', 'uint16');
structs.ReadOffsetParams.packing=8;
structs.ReadOffsetParams.members=struct('ccd', 'uint16');
structs.ReadOffsetResults.packing=8;
structs.ReadOffsetResults.members=struct('offset', 'uint16');
structs.ReadOffsetResults2.packing=8;
structs.ReadOffsetResults2.members=struct('offset', 'uint16', 'rms', 'double');
structs.AOTipTiltParams.packing=8;
structs.AOTipTiltParams.members=struct('xDeflection', 'uint16', 'yDeflection', 'uint16');
structs.AOSetFocusParams.packing=8;
structs.AOSetFocusParams.members=struct('focusCommand', 'uint16');
structs.AODelayParams.packing=8;
structs.AODelayParams.members=struct('delay', 'ulong');
structs.GetTurboStatusResults.packing=8;
structs.GetTurboStatusResults.members=struct('turboDetected', 'uint16');
structs.OpenDeviceParams.packing=8;
structs.OpenDeviceParams.members=struct('deviceType', 'uint16', 'lptBaseAddress', 'uint16', 'ipAddress', 'ulong');
structs.SetIRQLParams.packing=8;
structs.SetIRQLParams.members=struct('level', 'uint16');
structs.GetIRQLResults.packing=8;
structs.GetIRQLResults.members=struct('level', 'uint16');
structs.GetLinkStatusResults.packing=8;
structs.GetLinkStatusResults.members=struct('linkEstablished', 'uint16', 'baseAddress', 'uint16', 'cameraType', 'uint16', 'comTotal', 'ulong', 'comFailed', 'ulong');
structs.GetUSTimerResults.packing=8;
structs.GetUSTimerResults.members=struct('count', 'ulong');
structs.SendBlockParams.packing=8;
structs.SendBlockParams.members=struct('port', 'uint16', 'length', 'uint16', 'source', 'uint8Ptr');
structs.SendByteParams.packing=8;
structs.SendByteParams.members=struct('port', 'uint16', 'data', 'uint16');
structs.ClockADParams.packing=8;
structs.ClockADParams.members=struct('ccd', 'uint16', 'readoutMode', 'uint16', 'pixelStart', 'uint16', 'pixelLength', 'uint16');
structs.SystemTestParams.packing=8;
structs.SystemTestParams.members=struct('testClocks', 'uint16', 'testMotor', 'uint16', 'test5800', 'uint16', 'stlAlign', 'uint16', 'motorAlwaysOn', 'uint16');
structs.SendSTVBlockParams.packing=8;
structs.SendSTVBlockParams.members=struct('outLength', 'uint16', 'outPtr', 'uint8Ptr', 'inLength', 'uint16', 'inPtr', 'uint8Ptr');
structs.GetErrorStringParams.packing=8;
structs.GetErrorStringParams.members=struct('errorNo', 'uint16');
structs.GetErrorStringResults.packing=8;
structs.GetErrorStringResults.members=struct('errorString', 'int8#64');
structs.SetDriverHandleParams.packing=8;
structs.SetDriverHandleParams.members=struct('handle', 'int16');
structs.GetDriverHandleResults.packing=8;
structs.GetDriverHandleResults.members=struct('handle', 'int16');
structs.SetDriverControlParams.packing=8;
structs.SetDriverControlParams.members=struct('controlParameter', 'uint16', 'controlValue', 'ulong');
structs.GetDriverControlParams.packing=8;
structs.GetDriverControlParams.members=struct('controlParameter', 'uint16');
structs.GetDriverControlResults.packing=8;
structs.GetDriverControlResults.members=struct('controlValue', 'ulong');
structs.USBADControlParams.packing=8;
structs.USBADControlParams.members=struct('command', 'uint16', 'data', 'int16');
structs.QUERY_USB_INFO.packing=8;
structs.QUERY_USB_INFO.members=struct('cameraFound', 'uint16', 'cameraType', 'uint16', 'name', 'int8#64', 'serialNumber', 'int8#10');
structs.QUERY_ETHERNET_INFO.packing=8;
structs.QUERY_ETHERNET_INFO.members=struct('cameraFound', 'uint16', 'ipAddress', 'ulong', 'cameraType', 'uint16', 'name', 'int8#64', 'serialNumber', 'int8#10');
structs.GetPentiumCycleCountParams.packing=8;
structs.GetPentiumCycleCountParams.members=struct('rightShift', 'uint16');
structs.GetPentiumCycleCountResults.packing=8;
structs.GetPentiumCycleCountResults.members=struct('countLow', 'ulong', 'countHigh', 'ulong');
structs.RWUSBI2CParams.packing=8;
structs.RWUSBI2CParams.members=struct('address', 'uint8', 'data', 'uint8', 'write', 'uint16', 'deviceAddress', 'uint8');
structs.RWUSBI2CResults.packing=8;
structs.RWUSBI2CResults.members=struct('data', 'uint8');
structs.CFWParams.packing=8;
structs.CFWParams.members=struct('cfwModel', 'uint16', 'cfwCommand', 'uint16', 'cfwParam1', 'ulong', 'cfwParam2', 'ulong', 'outLength', 'uint16', 'outPtr', 'uint8Ptr', 'inLength', 'uint16', 'inPtr', 'uint8Ptr');
structs.CFWResults.packing=8;
structs.CFWResults.members=struct('cfwModel', 'uint16', 'cfwPosition', 'uint16', 'cfwStatus', 'uint16', 'cfwError', 'uint16', 'cfwResult1', 'ulong', 'cfwResult2', 'ulong');
structs.BitIOParams.packing=8;
structs.BitIOParams.members=struct('bitOperation', 'uint16', 'bitName', 'uint16', 'setBit', 'uint16');
structs.BitIOResults.packing=8;
structs.BitIOResults.members=struct('bitIsSet', 'uint16');
structs.UserEEPROMParams.packing=8;
structs.UserEEPROMParams.members=struct('writeData', 'uint16', 'data', 'uint8#32');
structs.ColumnEEPROMParams.packing=8;
structs.ColumnEEPROMParams.members=struct('writeData', 'uint16', 'columns', 'uint16#7', 'flags', 'uint16');
structs.BTDISetupParams.packing=8;
structs.BTDISetupParams.members=struct('rowPeriod', 'uint8');
structs.BTDISetupResults.packing=8;
structs.BTDISetupResults.members=struct('btdiErrors', 'uint8');
structs.MFParams.packing=8;
structs.MFParams.members=struct('mfModel', 'uint16', 'mfCommand', 'uint16', 'mfParam1', 'long', 'mfParam2', 'long', 'outLength', 'uint16', 'outPtr', 'uint8Ptr', 'inLength', 'uint16', 'inPtr', 'uint8Ptr');
structs.MFResults.packing=8;
structs.MFResults.members=struct('mfModel', 'uint16', 'mfPosition', 'long', 'mfStatus', 'uint16', 'mfError', 'uint16', 'mfResult1', 'long', 'mfResult2', 'long');
structs.DiffGuiderParams.packing=8;
structs.DiffGuiderParams.members=struct('diffGuiderCommand', 'uint16', 'spareShort', 'uint16', 'diffGuiderParam1', 'ulong', 'diffGuiderParam2', 'ulong', 'outLength', 'uint16', 'outPtr', 'uint8Ptr', 'inLength', 'uint16', 'inPtr', 'uint8Ptr');
structs.DiffGuiderResults.packing=8;
structs.DiffGuiderResults.members=struct('diffGuiderError', 'uint16', 'diffGuiderStatus', 'uint16', 'diffGuiderResult1', 'ulong', 'diffGuiderResult2', 'ulong');
structs.DGLEDState.packing=8;
structs.DGLEDState.members=struct('bRedEnable', 'uint16', 'bIREnable', 'uint16', 'nRedBrightness', 'uint16', 'nIRBrightness', 'uint16');
structs.BulkIOParams.packing=8;
structs.BulkIOParams.members=struct('command', 'uint16', 'isPixelData', 'uint16', 'dataLength', 'ulong', 'dataPtr', 'cstring');
structs.BulkIOResults.packing=8;
structs.BulkIOResults.members=struct('dataLength', 'ulong');
enuminfo.CCD_REQUEST=struct('CCD_IMAGING',0,'CCD_TRACKING',1,'CCD_EXT_TRACKING',2);
enuminfo.MF_COMMAND=struct('MFC_QUERY',0,'MFC_GOTO',1,'MFC_INIT',2,'MFC_GET_INFO',3,'MFC_ABORT',4);
enuminfo.PAR_COMMAND_STATUS=struct('CS_IDLE',0,'CS_IN_PROGRESS',1,'CS_INTEGRATING',2,'CS_INTEGRATION_COMPLETE',3);
enuminfo.MF_GETINFO_SELECT=struct('MFG_FIRMWARE_VERSION',0,'MFG_DATA_REGISTERS',1);
enuminfo.READOUT_BINNING_MODE=struct('RM_1X1',0,'RM_2X2',1,'RM_3X3',2,'RM_NX1',3,'RM_NX2',4,'RM_NX3',5,'RM_1X1_VOFFCHIP',6,'RM_2X2_VOFFCHIP',7,'RM_3X3_VOFFCHIP',8,'RM_9X9',9);
enuminfo.QUERY_TEMP_STATUS_REQUEST=struct('TEMP_STATUS_STANDARD',0,'TEMP_STATUS_ADVANCED',1,'TEMP_STATUS_ADVANCED2',2);
enuminfo.CCD_INFO_REQUEST=struct('CCD_INFO_IMAGING',0,'CCD_INFO_TRACKING',1,'CCD_INFO_EXTENDED',2,'CCD_INFO_EXTENDED_5C',3,'CCD_INFO_EXTENDED2_IMAGING',4,'CCD_INFO_EXTENDED2_TRACKING',5);
enuminfo.BITIO_OPERATION=struct('BITIO_WRITE',0,'BITIO_READ',1);
enuminfo.IMAGING_ABG=struct('ABG_NOT_PRESENT',0,'ABG_PRESENT',1);
enuminfo.PORT_RATE=struct('BR_AUTO',0,'BR_9600',1,'BR_19K',2,'BR_38K',3,'BR_57K',4,'BR_115K',5);
enuminfo.PAR_COMMAND=struct('CC_NULL',0,'CC_START_EXPOSURE',1,'CC_END_EXPOSURE',2,'CC_READOUT_LINE',3,'CC_DUMP_LINES',4,'CC_SET_TEMPERATURE_REGULATION',5,'CC_QUERY_TEMPERATURE_STATUS',6,'CC_ACTIVATE_RELAY',7,'CC_PULSE_OUT',8,'CC_ESTABLISH_LINK',9,'CC_GET_DRIVER_INFO',10,'CC_GET_CCD_INFO',11,'CC_QUERY_COMMAND_STATUS',12,'CC_MISCELLANEOUS_CONTROL',13,'CC_READ_SUBTRACT_LINE',14,'CC_UPDATE_CLOCK',15,'CC_READ_OFFSET',16,'CC_OPEN_DRIVER',17,'CC_CLOSE_DRIVER',18,'CC_TX_SERIAL_BYTES',19,'CC_GET_SERIAL_STATUS',20,'CC_AO_TIP_TILT',21,'CC_AO_SET_FOCUS',22,'CC_AO_DELAY',23,'CC_GET_TURBO_STATUS',24,'CC_END_READOUT',25,'CC_GET_US_TIMER',26,'CC_OPEN_DEVICE',27,'CC_CLOSE_DEVICE',28,'CC_SET_IRQL',29,'CC_GET_IRQL',30,'CC_GET_LINE',31,'CC_GET_LINK_STATUS',32,'CC_GET_DRIVER_HANDLE',33,'CC_SET_DRIVER_HANDLE',34,'CC_START_READOUT',35,'CC_GET_ERROR_STRING',36,'CC_SET_DRIVER_CONTROL',37,'CC_GET_DRIVER_CONTROL',38,'CC_USB_AD_CONTROL',39,'CC_QUERY_USB',40,'CC_GET_PENTIUM_CYCLE_COUNT',41,'CC_RW_USB_I2C',42,'CC_CFW',43,'CC_BIT_IO',44,'CC_USER_EEPROM',45,'CC_AO_CENTER',46,'CC_BTDI_SETUP',47,'CC_MOTOR_FOCUS',48,'CC_QUERY_ETHERNET',49,'CC_START_EXPOSURE2',50,'CC_SET_TEMPERATURE_REGULATION2',51,'CC_READ_OFFSET2',52,'CC_DIFF_GUIDER',53,'CC_COLUMN_EEPROM',54,'CC_SEND_BLOCK',90,'CC_SEND_BYTE',91,'CC_GET_BYTE',92,'CC_SEND_AD',93,'CC_GET_AD',94,'CC_CLOCK_AD',95,'CC_SYSTEM_TEST',96,'CC_GET_DRIVER_OPTIONS',97,'CC_SET_DRIVER_OPTIONS',98,'CC_FIRMWARE',99,'CC_BULK_IO',100,'CC_LAST_COMMAND',101);
enuminfo.LED_STATE=struct('LED_OFF',0,'LED_ON',1,'LED_BLINK_LOW',2,'LED_BLINK_HIGH',3);
enuminfo.DIFF_GUIDER_ERROR=struct('DGE_NO_ERROR',0,'DGE_NOT_FOUND',1,'DGE_BAD_COMMAND',2,'DGE_BAD_PARAMETER',3);
enuminfo.AD_SIZE=struct('AD_UNKNOWN',0,'AD_12_BITS',1,'AD_16_BITS',2);
enuminfo.USB_AD_CONTROL_COMMAND=struct('USB_AD_IMAGING_GAIN',0,'USB_AD_IMAGING_OFFSET',1,'USB_AD_TRACKING_GAIN',2,'USB_AD_TRACKING_OFFSET',3,'USB_AD_EXTTRACKING_GAIN',4,'USB_AD_EXTTRACKING_OFFSET',5,'USB_AD_IMAGING2_GAIN',6,'USB_AD_IMAGING2_OFFSET',7);
enuminfo.DRIVER_REQUEST=struct('DRIVER_STD',0,'DRIVER_EXTENDED',1,'DRIVER_USB_LOADER',2);
enuminfo.CFW_COMMAND=struct('CFWC_QUERY',0,'CFWC_GOTO',1,'CFWC_INIT',2,'CFWC_GET_INFO',3,'CFWC_OPEN_DEVICE',4,'CFWC_CLOSE_DEVICE',5);
enuminfo.ABG_STATE7=struct('ABG_LOW7',0,'ABG_CLK_LOW7',1,'ABG_CLK_MED7',2,'ABG_CLK_HI7',3);
enuminfo.BULK_IO_COMMAND=struct('BIO_READ',0,'BIO_WRITE',1,'BIO_FLUSH',2);
enuminfo.DIFF_GUIDER_STATUS=struct('DGS_UNKNOWN',0,'DGS_IDLE',1,'DGS_BUSY',2);
enuminfo.FILTER_COMMAND=struct('FILTER_LEAVE',0,'FILTER_SET_1',1,'FILTER_SET_2',2,'FILTER_SET_3',3,'FILTER_SET_4',4,'FILTER_SET_5',5,'FILTER_STOP',6,'FILTER_INIT',7);
enuminfo.AO_FOCUS_COMMAND=struct('AOF_HARD_CENTER',0,'AOF_SOFT_CENTER',1,'AOF_STEP_IN',2,'AOF_STEP_OUT',3);
enuminfo.DIFF_GUIDER_COMMAND=struct('DGC_DETECT',0,'DGC_GET_BRIGHTNESS',1,'DGC_SET_BRIGHTNESS',2);
enuminfo.SHUTTER_STATE7=struct('SS_OPEN',0,'SS_CLOSED',1,'SS_OPENING',2,'SS_CLOSING',3);
enuminfo.MF_STATUS=struct('MFS_UNKNOWN',0,'MFS_IDLE',1,'MFS_BUSY',2);
enuminfo.CFW_COM_PORT=struct('CFWPORT_COM1',1,'CFWPORT_COM2',2,'CFWPORT_COM3',3,'CFWPORT_COM4',4);
enuminfo.SBIG_DEVICE_TYPE=struct('DEV_NONE',0,'DEV_LPT1',1,'DEV_LPT2',2,'DEV_LPT3',3,'DEV_USB',32512,'DEV_ETH',32513,'DEV_USB1',32514,'DEV_USB2',32515,'DEV_USB3',32516,'DEV_USB4',32517);
enuminfo.CFW_STATUS=struct('CFWS_UNKNOWN',0,'CFWS_IDLE',1,'CFWS_BUSY',2);
enuminfo.MF_MODEL_SELECT=struct('MFSEL_UNKNOWN',0,'MFSEL_AUTO',1,'MFSEL_STF',2);
enuminfo.ENUM_USB_DRIVER=struct('USBD_SBIGE',0,'USBD_SBIGI',1,'USBD_SBIGM',2,'USBD_NEXT',3);
enuminfo.FAN_STATE=struct('FS_OFF',0,'FS_ON',1,'FS_AUTOCONTROL',2);
enuminfo.MF_ERROR=struct('MFE_NONE',0,'MFE_BUSY',1,'MFE_BAD_COMMAND',2,'MFE_CAL_ERROR',3,'MFE_MOTOR_TIMEOUT',4,'MFE_BAD_MODEL',5,'MFE_I2C_ERROR',6,'MFE_NOT_FOUND',7);
enuminfo.SHUTTER_COMMAND=struct('SC_LEAVE_SHUTTER',0,'SC_OPEN_SHUTTER',1,'SC_CLOSE_SHUTTER',2,'SC_INITIALIZE_SHUTTER',3,'SC_OPEN_EXT_SHUTTER',4,'SC_CLOSE_EXT_SHUTTER',5);
enuminfo.PAR_ERROR=struct('CE_NO_ERROR',0,'CE_CAMERA_NOT_FOUND',1,'CE_EXPOSURE_IN_PROGRESS',2,'CE_NO_EXPOSURE_IN_PROGRESS',3,'CE_UNKNOWN_COMMAND',4,'CE_BAD_CAMERA_COMMAND',5,'CE_BAD_PARAMETER',6,'CE_TX_TIMEOUT',7,'CE_RX_TIMEOUT',8,'CE_NAK_RECEIVED',9,'CE_CAN_RECEIVED',10,'CE_UNKNOWN_RESPONSE',11,'CE_BAD_LENGTH',12,'CE_AD_TIMEOUT',13,'CE_KBD_ESC',14,'CE_CHECKSUM_ERROR',15,'CE_EEPROM_ERROR',16,'CE_SHUTTER_ERROR',17,'CE_UNKNOWN_CAMERA',18,'CE_DRIVER_NOT_FOUND',19,'CE_DRIVER_NOT_OPEN',20,'CE_DRIVER_NOT_CLOSED',21,'CE_SHARE_ERROR',22,'CE_TCE_NOT_FOUND',23,'CE_AO_ERROR',24,'CE_ECP_ERROR',25,'CE_MEMORY_ERROR',26,'CE_DEVICE_NOT_FOUND',27,'CE_DEVICE_NOT_OPEN',28,'CE_DEVICE_NOT_CLOSED',29,'CE_DEVICE_NOT_IMPLEMENTED',30,'CE_DEVICE_DISABLED',31,'CE_OS_ERROR',32,'CE_SOCK_ERROR',33,'CE_SERVER_NOT_FOUND',34,'CE_CFW_ERROR',35,'CE_MF_ERROR',36,'CE_FIRMWARE_ERROR',37,'CE_DIFF_GUIDER_ERROR',38,'CE_NEXT_ERROR',39);
enuminfo.FILTER_TYPE=struct('FW_UNKNOWN',0,'FW_EXTERNAL',1,'FW_VANE',2,'FW_FILTER_WHEEL',3);
enuminfo.FILTER_STATE=struct('FS_MOVING',0,'FS_AT_1',1,'FS_AT_2',2,'FS_AT_3',3,'FS_AT_4',4,'FS_AT_5',5,'FS_UNKNOWN',6);
enuminfo.CFW_POSITION=struct('CFWP_UNKNOWN',0,'CFWP_1',1,'CFWP_2',2,'CFWP_3',3,'CFWP_4',4,'CFWP_5',5,'CFWP_6',6,'CFWP_7',7,'CFWP_8',8,'CFWP_9',9,'CFWP_10',10);
enuminfo.DRIVER_CONTROL_PARAM=struct('DCP_USB_FIFO_ENABLE',0,'DCP_CALL_JOURNAL_ENABLE',1,'DCP_IVTOH_RATIO',2,'DCP_USB_FIFO_SIZE',3,'DCP_USB_DRIVER',4,'DCP_KAI_RELGAIN',5,'DCP_USB_PIXEL_DL_ENABLE',6,'DCP_HIGH_THROUGHPUT',7,'DCP_VDD_OPTIMIZED',8,'DCP_AUTO_AD_GAIN',9,'DCP_NO_HCLKS_FOR_INTEGRATION',10,'DCP_TDI_MODE_ENABLE',11,'DCP_VERT_FLUSH_CONTROL_ENABLE',12,'DCP_ETHERNET_PIPELINE_ENABLE',13,'DCP_FAST_LINK',14,'DCP_OVERSCAN_ROWSCOLS',15,'DCP_PIXEL_PIPELINE_ENABLE',16,'DCP_COLUMN_REPAIR_ENABLE',17,'DCP_WARM_PIXEL_REPAIR_ENABLE',18,'DCP_WARM_PIXEL_REPAIR_COUNT',19,'DCP_LAST',20);
enuminfo.CFW_GETINFO_SELECT=struct('CFWG_FIRMWARE_VERSION',0,'CFWG_CAL_DATA',1,'CFWG_DATA_REGISTERS',2);
enuminfo.CAMERA_TYPE=struct('ST7_CAMERA',4,'ST8_CAMERA',5,'ST5C_CAMERA',6,'TCE_CONTROLLER',7,'ST237_CAMERA',8,'STK_CAMERA',9,'ST9_CAMERA',10,'STV_CAMERA',11,'ST10_CAMERA',12,'ST1K_CAMERA',13,'ST2K_CAMERA',14,'STL_CAMERA',15,'ST402_CAMERA',16,'STX_CAMERA',17,'ST4K_CAMERA',18,'STT_CAMERA',19,'STI_CAMERA',20,'STF8300_CAMERA',21,'NEXT_CAMERA',22,'NO_CAMERA',65535);
enuminfo.CFW_ERROR=struct('CFWE_NONE',0,'CFWE_BUSY',1,'CFWE_BAD_COMMAND',2,'CFWE_CAL_ERROR',3,'CFWE_MOTOR_TIMEOUT',4,'CFWE_BAD_MODEL',5,'CFWE_DEVICE_NOT_CLOSED',6,'CFWE_DEVICE_NOT_OPEN',7,'CFWE_I2C_ERROR',8);
enuminfo.TEMPERATURE_REGULATION=struct('REGULATION_OFF',0,'REGULATION_ON',1,'REGULATION_OVERRIDE',2,'REGULATION_FREEZE',3,'REGULATION_UNFREEZE',4,'REGULATION_ENABLE_AUTOFREEZE',5,'REGULATION_DISABLE_AUTOFREEZE',6);
enuminfo.CFW_MODEL_SELECT=struct('CFWSEL_UNKNOWN',0,'CFWSEL_CFW2',1,'CFWSEL_CFW5',2,'CFWSEL_CFW8',3,'CFWSEL_CFWL',4,'CFWSEL_CFW402',5,'CFWSEL_AUTO',6,'CFWSEL_CFW6A',7,'CFWSEL_CFW10',8,'CFWSEL_CFW10_SERIAL',9,'CFWSEL_CFW9',10,'CFWSEL_CFWL8',11,'CFWSEL_CFWL8G',12,'CFWSEL_CFW1603',13,'CFWSEL_FW5_STX',14,'CFWSEL_FW5_8300',15,'CFWSEL_FW8_8300',16);
enuminfo.BITIO_NAME=struct('BITI_PS_LOW',0,'BITO_IO1',1,'BITO_IO2',2,'BITI_IO3',3,'BITO_FPGA_WE',4);
enuminfo.BTDI_ERROR=struct('BTDI_SCHEDULE_ERROR',1,'BTDI_OVERRUN_ERROR',2);
methodinfo=fcns;